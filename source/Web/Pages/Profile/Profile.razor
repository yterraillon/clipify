@page "/profile"

@using MediatR
@using Web.Shared.DesignSystem.Icons
@using Web.Shared.Components
@using Application.User
@using Domain.Entities
@using Application.SpotifyAuthentication.Commands.Logout

@inject NavigationManager NavigationManager
@inject IMediator Mediator

@inject ICurrentUserService CurrentUserService

<div class="divide-y divide-yinblue">
    <div class="flex flex-row mb-8 my-8">
        <AvatarIcon />
        <div class="ml-4 mt-8 p-2">
            <p class="mb-4">Profil</p>
            <h1 class="mb-2">@CurrentUserService.GetCurrentUser().Username</h1>
            <p> XX playlist clonées - XXX titres synchronisés</p>
        </div>
    </div>

    <div class="flex flex-col">
        <div class="mb-4 mt-2">
            @if (_hasNoServiceConnected)
            {
                <ConnectAService />
            }
            else
            {
                <h2>Services connectés</h2>
            }
        </div>

        @if (_currentUser.SpotifyServiceProfile.IsLoggedIn())
        {
            <div class="flex flex-row justify-between bg-white border border-lightgrey max-w-lg items-center">
                <div class="ml-2">
                    <img src="img/Spotify_Logo_RGB_Green.png" class="h-12 p-2" alt="Spotify"/>
                </div>
                <div class="hover:bg-palespringbud p-2 h-12" @onclick="@RemoveSpotifyConnection">
                    <div class="flex items-center justify-center h-full">
                        <CrossIcon/>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private UserProfile _currentUser = UserProfile.Empty;

    private bool _hasNoServiceConnected;

    protected override Task OnInitializedAsync()
    {
        _currentUser = CurrentUserService.GetCurrentUser();
        _hasNoServiceConnected = CurrentUserService.HasNoServiceConnected();
        return base.OnInitializedAsync();
    }

    private async Task RemoveSpotifyConnection()
    {
        var response = await Mediator.Send(new Logout.Request());

        if (response.IsSuccess)
        {
            RefreshPage();
        }

        // TODO : message d'erreur en cas d'échec
    }

    private void RefreshPage() => 
        NavigationManager.NavigateTo("/profile", forceLoad: true);
}